name: CI/CD

on:
  push:
    branches:
      - master
#   pull_request:
#     branches:
#       - master

jobs:
  deploy-aws:
    runs-on: ubuntu-latest
    env:
      # need to set to false, otherwise react warnings will be treated as errors
      CI: false
      PUBLIC_API_URL: ${{secrets.PUBLIC_API_URL}}
      PUBLIC_API_GRAPHQL_URL: ${{secrets.PUBLIC_API_GRAPHQL_URL}}
      MONGO_URL: ${{secrets.MONGO_URL}}
      SESSION_SECRET: ${{secrets.SESSION_SECRET}}
      GOOGLE_CLIENT: ${{secrets.GOOGLE_CLIENT}}
      GOOGLE_SECRET: ${{secrets.GOOGLE_SECRET}}
      ADMIN_EMAILS: ${{secrets.ADMIN_EMAILS}}
      PRODUCTION_DOMAIN: ${{secrets.PRODUCTION_DOMAIN}}
      PORT: ${{secrets.PORT}}

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Dump Environment Variables
        run: |
          cd api && printf "PUBLIC_API_URL=$PUBLIC_API_URL\n \
            PUBLIC_API_GRAPHQL_URL=$PUBLIC_API_GRAPHQL_URL\n \
            MONGO_URL=$MONGO_URL\n \
            SESSION_SECRET=$SESSION_SECRET\n \
            GOOGLE_CLIENT=$GOOGLE_CLIENT\n \
            GOOGLE_SECRET=$GOOGLE_SECRET\n \
            ADMIN_EMAILS=$ADMIN_EMAILS\n \
            PRODUCTION_DOMAIN=$PRODUCTION_DOMAIN\n \
            PORT=$PORT" > .env

      - name: Install and Build Frontend ðŸ”§ 
        run: |
          cd site
          npm install --legacy-peer-deps
          npm run build
          cp -r build ../api/

      - name: Install and Build Backend ðŸ”§ 
        run: |
          cd api
          rm .env.local
          npm install
          npm run build

      - name: Install Plugin and Deploy
        uses: serverless/github-action@v3.1
        with:
          args: >
            -c "cd api && 
            serverless plugin install --name serverless-dotenv-plugin && 
            serverless plugin install --name serverless-domain-manager && 
            serverless package --package my-package &&
            serverless deploy --package ./my-package"
          entrypoint: /bin/sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
