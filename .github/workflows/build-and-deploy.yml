name: Build and deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build project
    runs-on: ubuntu-latest
    env:
      # need to set to false, otherwise react warnings will be treated as errors
      CI: false
      PUBLIC_API_URL: ${{secrets.PUBLIC_API_URL}}
      PUBLIC_API_GRAPHQL_URL: ${{secrets.PUBLIC_API_GRAPHQL_URL}}
      MONGO_URL: ${{secrets.MONGO_URL}}
      SESSION_SECRET: ${{secrets.SESSION_SECRET}}
      GOOGLE_CLIENT: ${{secrets.GOOGLE_CLIENT}}
      GOOGLE_SECRET: ${{secrets.GOOGLE_SECRET}}
      ADMIN_EMAILS: ${{secrets.ADMIN_EMAILS}}
      STAGING_PREFIX: ${{ github.event_name == 'pull_request' && format('staging-{0}.', github.event.pull_request.number) || '' }}
      PRODUCTION_DOMAIN: ${{secrets.PRODUCTION_DOMAIN}}
      STAGE_NAME: ${{ github.event_name == 'pull_request' && format('staging-{0}', github.event.pull_request.number) || 'prod' }}
      PORT: ${{secrets.PORT}}

    concurrency:
      group: build-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Dump Environment Variables
        run: |
          cd api && printf "PUBLIC_API_URL=$PUBLIC_API_URL\n \
            PUBLIC_API_GRAPHQL_URL=$PUBLIC_API_GRAPHQL_URL\n \
            MONGO_URL=$MONGO_URL\n \
            SESSION_SECRET=$SESSION_SECRET\n \
            GOOGLE_CLIENT=$GOOGLE_CLIENT\n \
            GOOGLE_SECRET=$GOOGLE_SECRET\n \
            ADMIN_EMAILS=$ADMIN_EMAILS\n \
            STAGING_PREFIX=$STAGING_PREFIX\n \
            PRODUCTION_DOMAIN=$PRODUCTION_DOMAIN\n \
            STAGE_NAME=$STAGE_NAME\n \
            PORT=$PORT" > .env

      - name: Install and Build Frontend ðŸ”§ 
        run: |
          cd site
          npm install
          npm run build
          cp -r build ../api/

      - name: Install and Build Backend ðŸ”§ 
        run: |
          cd api
          rm .env.local
          npm install
          npm run build

      - name: Cache build to use in deployment
        uses: actions/cache@v3
        with:
          key: "${{ github.workflow }} #${{ github.run_number }} attempt ${{ github.run_attempt }}"
          path: ${{ github.workspace }}

  deploy:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest

    concurrency:
      group: deploy-${{ github.head_ref || github.run_id }}

    steps:
      - name: Retrieve build from cache
        uses: actions/cache@v3
        with:
          key: "${{ github.workflow }} #${{ github.run_number }} attempt ${{ github.run_attempt }}"
          path: ${{ github.workspace }}

      - name: Install Plugin and Deploy
        uses: serverless/github-action@v3.1
        with:
          args: >
            -c "cd api && 
            serverless plugin install --name serverless-dotenv-plugin && 
            serverless plugin install --name serverless-domain-manager && 
            serverless deploy"
          entrypoint: /bin/sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Comment staging URL
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' }}
        with:
          header: staging url
          recreate: true
          message: |+ 
          Deployed staging instance to https://staging-${{ github.event.pull_request.number }}.peterportal.org
          Please note that it usually takes a couple minutes for the instance to be deployed and the link above may temporarily display an error message.